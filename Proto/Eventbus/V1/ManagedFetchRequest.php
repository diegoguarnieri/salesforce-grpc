<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto_files/pubsub_api.proto

namespace Eventbus\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * This feature is part of an open beta release and is subject to the applicable
 * Beta Services Terms provided at Agreements and Terms
 * (https://www.salesforce.com/company/legal/agreements/).
 * Request for the ManagedSubscribe streaming RPC method. This request is used to:
 * 1. Establish the initial managed subscribe stream.
 * 2. Request more events from the subscription stream.
 * 3. Commit a Replay ID using CommitReplayRequest.
 *
 * Generated from protobuf message <code>eventbus.v1.ManagedFetchRequest</code>
 */
class ManagedFetchRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Managed subscription ID or developer name. This value corresponds to the
     * ID or developer name of the ManagedEventSubscription Tooling API record.
     * This value is consumed as part of the first ManagedFetchRequest only.
     * The subscription_id cannot change in subsequent ManagedFetchRequests
     * within the same subscribe stream, but can be omitted for efficiency.
     *
     * Generated from protobuf field <code>string subscription_id = 1;</code>
     */
    protected $subscription_id = '';
    /**
     * Generated from protobuf field <code>string developer_name = 2;</code>
     */
    protected $developer_name = '';
    /**
     * Number of events a client is ready to accept. Each subsequent FetchRequest informs the server
     * of additional processing capacity available on the client side. There is no guarantee of equal number of
     * FetchResponse messages to be sent back. There is not necessarily a correspondence between
     * number of requested events in FetchRequest and the number of events returned in subsequent
     * FetchResponses.
     *
     * Generated from protobuf field <code>int32 num_requested = 3;</code>
     */
    protected $num_requested = 0;
    /**
     * For internal Salesforce use only.
     *
     * Generated from protobuf field <code>string auth_refresh = 4;</code>
     */
    protected $auth_refresh = '';
    /**
     * Generated from protobuf field <code>.eventbus.v1.CommitReplayRequest commit_replay_id_request = 5;</code>
     */
    protected $commit_replay_id_request = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $subscription_id
     *           Managed subscription ID or developer name. This value corresponds to the
     *           ID or developer name of the ManagedEventSubscription Tooling API record.
     *           This value is consumed as part of the first ManagedFetchRequest only.
     *           The subscription_id cannot change in subsequent ManagedFetchRequests
     *           within the same subscribe stream, but can be omitted for efficiency.
     *     @type string $developer_name
     *     @type int $num_requested
     *           Number of events a client is ready to accept. Each subsequent FetchRequest informs the server
     *           of additional processing capacity available on the client side. There is no guarantee of equal number of
     *           FetchResponse messages to be sent back. There is not necessarily a correspondence between
     *           number of requested events in FetchRequest and the number of events returned in subsequent
     *           FetchResponses.
     *     @type string $auth_refresh
     *           For internal Salesforce use only.
     *     @type \Eventbus\V1\CommitReplayRequest $commit_replay_id_request
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ProtoFiles\PubsubApi::initOnce();
        parent::__construct($data);
    }

    /**
     * Managed subscription ID or developer name. This value corresponds to the
     * ID or developer name of the ManagedEventSubscription Tooling API record.
     * This value is consumed as part of the first ManagedFetchRequest only.
     * The subscription_id cannot change in subsequent ManagedFetchRequests
     * within the same subscribe stream, but can be omitted for efficiency.
     *
     * Generated from protobuf field <code>string subscription_id = 1;</code>
     * @return string
     */
    public function getSubscriptionId()
    {
        return $this->subscription_id;
    }

    /**
     * Managed subscription ID or developer name. This value corresponds to the
     * ID or developer name of the ManagedEventSubscription Tooling API record.
     * This value is consumed as part of the first ManagedFetchRequest only.
     * The subscription_id cannot change in subsequent ManagedFetchRequests
     * within the same subscribe stream, but can be omitted for efficiency.
     *
     * Generated from protobuf field <code>string subscription_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setSubscriptionId($var)
    {
        GPBUtil::checkString($var, True);
        $this->subscription_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string developer_name = 2;</code>
     * @return string
     */
    public function getDeveloperName()
    {
        return $this->developer_name;
    }

    /**
     * Generated from protobuf field <code>string developer_name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDeveloperName($var)
    {
        GPBUtil::checkString($var, True);
        $this->developer_name = $var;

        return $this;
    }

    /**
     * Number of events a client is ready to accept. Each subsequent FetchRequest informs the server
     * of additional processing capacity available on the client side. There is no guarantee of equal number of
     * FetchResponse messages to be sent back. There is not necessarily a correspondence between
     * number of requested events in FetchRequest and the number of events returned in subsequent
     * FetchResponses.
     *
     * Generated from protobuf field <code>int32 num_requested = 3;</code>
     * @return int
     */
    public function getNumRequested()
    {
        return $this->num_requested;
    }

    /**
     * Number of events a client is ready to accept. Each subsequent FetchRequest informs the server
     * of additional processing capacity available on the client side. There is no guarantee of equal number of
     * FetchResponse messages to be sent back. There is not necessarily a correspondence between
     * number of requested events in FetchRequest and the number of events returned in subsequent
     * FetchResponses.
     *
     * Generated from protobuf field <code>int32 num_requested = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setNumRequested($var)
    {
        GPBUtil::checkInt32($var);
        $this->num_requested = $var;

        return $this;
    }

    /**
     * For internal Salesforce use only.
     *
     * Generated from protobuf field <code>string auth_refresh = 4;</code>
     * @return string
     */
    public function getAuthRefresh()
    {
        return $this->auth_refresh;
    }

    /**
     * For internal Salesforce use only.
     *
     * Generated from protobuf field <code>string auth_refresh = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setAuthRefresh($var)
    {
        GPBUtil::checkString($var, True);
        $this->auth_refresh = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.eventbus.v1.CommitReplayRequest commit_replay_id_request = 5;</code>
     * @return \Eventbus\V1\CommitReplayRequest|null
     */
    public function getCommitReplayIdRequest()
    {
        return $this->commit_replay_id_request;
    }

    public function hasCommitReplayIdRequest()
    {
        return isset($this->commit_replay_id_request);
    }

    public function clearCommitReplayIdRequest()
    {
        unset($this->commit_replay_id_request);
    }

    /**
     * Generated from protobuf field <code>.eventbus.v1.CommitReplayRequest commit_replay_id_request = 5;</code>
     * @param \Eventbus\V1\CommitReplayRequest $var
     * @return $this
     */
    public function setCommitReplayIdRequest($var)
    {
        GPBUtil::checkMessage($var, \Eventbus\V1\CommitReplayRequest::class);
        $this->commit_replay_id_request = $var;

        return $this;
    }

}

