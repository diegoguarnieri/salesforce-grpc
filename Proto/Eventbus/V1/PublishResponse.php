<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto_files/pubsub_api.proto

namespace Eventbus\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Response for the Publish and PublishStream RPC methods. This returns
 * a list of PublishResults for each event that the client attempted to
 * publish. PublishResult indicates if publish succeeded or not
 * for each event. It also returns the schema ID that was used to create
 * the ProducerEvents in the PublishRequest.
 *
 * Generated from protobuf message <code>eventbus.v1.PublishResponse</code>
 */
class PublishResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * Publish results
     *
     * Generated from protobuf field <code>repeated .eventbus.v1.PublishResult results = 1;</code>
     */
    private $results;
    /**
     * Schema fingerprint for this event, which is a hash of the schema
     *
     * Generated from protobuf field <code>string schema_id = 2;</code>
     */
    protected $schema_id = '';
    /**
     * RPC ID used to trace errors.
     *
     * Generated from protobuf field <code>string rpc_id = 3;</code>
     */
    protected $rpc_id = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type array<\Eventbus\V1\PublishResult>|\Google\Protobuf\Internal\RepeatedField $results
     *           Publish results
     *     @type string $schema_id
     *           Schema fingerprint for this event, which is a hash of the schema
     *     @type string $rpc_id
     *           RPC ID used to trace errors.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ProtoFiles\PubsubApi::initOnce();
        parent::__construct($data);
    }

    /**
     * Publish results
     *
     * Generated from protobuf field <code>repeated .eventbus.v1.PublishResult results = 1;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getResults()
    {
        return $this->results;
    }

    /**
     * Publish results
     *
     * Generated from protobuf field <code>repeated .eventbus.v1.PublishResult results = 1;</code>
     * @param array<\Eventbus\V1\PublishResult>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setResults($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Eventbus\V1\PublishResult::class);
        $this->results = $arr;

        return $this;
    }

    /**
     * Schema fingerprint for this event, which is a hash of the schema
     *
     * Generated from protobuf field <code>string schema_id = 2;</code>
     * @return string
     */
    public function getSchemaId()
    {
        return $this->schema_id;
    }

    /**
     * Schema fingerprint for this event, which is a hash of the schema
     *
     * Generated from protobuf field <code>string schema_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setSchemaId($var)
    {
        GPBUtil::checkString($var, True);
        $this->schema_id = $var;

        return $this;
    }

    /**
     * RPC ID used to trace errors.
     *
     * Generated from protobuf field <code>string rpc_id = 3;</code>
     * @return string
     */
    public function getRpcId()
    {
        return $this->rpc_id;
    }

    /**
     * RPC ID used to trace errors.
     *
     * Generated from protobuf field <code>string rpc_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setRpcId($var)
    {
        GPBUtil::checkString($var, True);
        $this->rpc_id = $var;

        return $this;
    }

}

