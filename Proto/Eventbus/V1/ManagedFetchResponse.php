<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto_files/pubsub_api.proto

namespace Eventbus\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * This feature is part of an open beta release and is subject to the applicable
 * Beta Services Terms provided at Agreements and Terms
 * (https://www.salesforce.com/company/legal/agreements/).
 * Response for the ManagedSubscribe streaming RPC method. This can return
 * ConsumerEvent(s) or CommitReplayResponse along with other metadata.
 *
 * Generated from protobuf message <code>eventbus.v1.ManagedFetchResponse</code>
 */
class ManagedFetchResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * Received events for subscription for client consumption
     *
     * Generated from protobuf field <code>repeated .eventbus.v1.ConsumerEvent events = 1;</code>
     */
    private $events;
    /**
     * Latest replay ID of a subscription.
     *
     * Generated from protobuf field <code>bytes latest_replay_id = 2;</code>
     */
    protected $latest_replay_id = '';
    /**
     * RPC ID used to trace errors.
     *
     * Generated from protobuf field <code>string rpc_id = 3;</code>
     */
    protected $rpc_id = '';
    /**
     * Number of remaining events to be delivered to the client for a Subscribe RPC call.
     *
     * Generated from protobuf field <code>int32 pending_num_requested = 4;</code>
     */
    protected $pending_num_requested = 0;
    /**
     * commit response
     *
     * Generated from protobuf field <code>.eventbus.v1.CommitReplayResponse commit_response = 5;</code>
     */
    protected $commit_response = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type array<\Eventbus\V1\ConsumerEvent>|\Google\Protobuf\Internal\RepeatedField $events
     *           Received events for subscription for client consumption
     *     @type string $latest_replay_id
     *           Latest replay ID of a subscription.
     *     @type string $rpc_id
     *           RPC ID used to trace errors.
     *     @type int $pending_num_requested
     *           Number of remaining events to be delivered to the client for a Subscribe RPC call.
     *     @type \Eventbus\V1\CommitReplayResponse $commit_response
     *           commit response
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ProtoFiles\PubsubApi::initOnce();
        parent::__construct($data);
    }

    /**
     * Received events for subscription for client consumption
     *
     * Generated from protobuf field <code>repeated .eventbus.v1.ConsumerEvent events = 1;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getEvents()
    {
        return $this->events;
    }

    /**
     * Received events for subscription for client consumption
     *
     * Generated from protobuf field <code>repeated .eventbus.v1.ConsumerEvent events = 1;</code>
     * @param array<\Eventbus\V1\ConsumerEvent>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setEvents($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Eventbus\V1\ConsumerEvent::class);
        $this->events = $arr;

        return $this;
    }

    /**
     * Latest replay ID of a subscription.
     *
     * Generated from protobuf field <code>bytes latest_replay_id = 2;</code>
     * @return string
     */
    public function getLatestReplayId()
    {
        return $this->latest_replay_id;
    }

    /**
     * Latest replay ID of a subscription.
     *
     * Generated from protobuf field <code>bytes latest_replay_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setLatestReplayId($var)
    {
        GPBUtil::checkString($var, False);
        $this->latest_replay_id = $var;

        return $this;
    }

    /**
     * RPC ID used to trace errors.
     *
     * Generated from protobuf field <code>string rpc_id = 3;</code>
     * @return string
     */
    public function getRpcId()
    {
        return $this->rpc_id;
    }

    /**
     * RPC ID used to trace errors.
     *
     * Generated from protobuf field <code>string rpc_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setRpcId($var)
    {
        GPBUtil::checkString($var, True);
        $this->rpc_id = $var;

        return $this;
    }

    /**
     * Number of remaining events to be delivered to the client for a Subscribe RPC call.
     *
     * Generated from protobuf field <code>int32 pending_num_requested = 4;</code>
     * @return int
     */
    public function getPendingNumRequested()
    {
        return $this->pending_num_requested;
    }

    /**
     * Number of remaining events to be delivered to the client for a Subscribe RPC call.
     *
     * Generated from protobuf field <code>int32 pending_num_requested = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setPendingNumRequested($var)
    {
        GPBUtil::checkInt32($var);
        $this->pending_num_requested = $var;

        return $this;
    }

    /**
     * commit response
     *
     * Generated from protobuf field <code>.eventbus.v1.CommitReplayResponse commit_response = 5;</code>
     * @return \Eventbus\V1\CommitReplayResponse|null
     */
    public function getCommitResponse()
    {
        return $this->commit_response;
    }

    public function hasCommitResponse()
    {
        return isset($this->commit_response);
    }

    public function clearCommitResponse()
    {
        unset($this->commit_response);
    }

    /**
     * commit response
     *
     * Generated from protobuf field <code>.eventbus.v1.CommitReplayResponse commit_response = 5;</code>
     * @param \Eventbus\V1\CommitReplayResponse $var
     * @return $this
     */
    public function setCommitResponse($var)
    {
        GPBUtil::checkMessage($var, \Eventbus\V1\CommitReplayResponse::class);
        $this->commit_response = $var;

        return $this;
    }

}

