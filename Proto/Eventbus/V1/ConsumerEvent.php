<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto_files/pubsub_api.proto

namespace Eventbus\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Represents an event that is consumed in a subscriber client.
 * In addition to the fields in ProducerEvent, ConsumerEvent has the replay_id field.
 *
 * Generated from protobuf message <code>eventbus.v1.ConsumerEvent</code>
 */
class ConsumerEvent extends \Google\Protobuf\Internal\Message
{
    /**
     * The event with fields identical to ProducerEvent
     *
     * Generated from protobuf field <code>.eventbus.v1.ProducerEvent event = 1;</code>
     */
    protected $event = null;
    /**
     * The replay ID of the event.
     * A subscriber app can store the replay ID. When the app restarts, it can resume subscription
     * starting from events in the event bus after the event with that replay ID.
     *
     * Generated from protobuf field <code>bytes replay_id = 2;</code>
     */
    protected $replay_id = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Eventbus\V1\ProducerEvent $event
     *           The event with fields identical to ProducerEvent
     *     @type string $replay_id
     *           The replay ID of the event.
     *           A subscriber app can store the replay ID. When the app restarts, it can resume subscription
     *           starting from events in the event bus after the event with that replay ID.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ProtoFiles\PubsubApi::initOnce();
        parent::__construct($data);
    }

    /**
     * The event with fields identical to ProducerEvent
     *
     * Generated from protobuf field <code>.eventbus.v1.ProducerEvent event = 1;</code>
     * @return \Eventbus\V1\ProducerEvent|null
     */
    public function getEvent()
    {
        return $this->event;
    }

    public function hasEvent()
    {
        return isset($this->event);
    }

    public function clearEvent()
    {
        unset($this->event);
    }

    /**
     * The event with fields identical to ProducerEvent
     *
     * Generated from protobuf field <code>.eventbus.v1.ProducerEvent event = 1;</code>
     * @param \Eventbus\V1\ProducerEvent $var
     * @return $this
     */
    public function setEvent($var)
    {
        GPBUtil::checkMessage($var, \Eventbus\V1\ProducerEvent::class);
        $this->event = $var;

        return $this;
    }

    /**
     * The replay ID of the event.
     * A subscriber app can store the replay ID. When the app restarts, it can resume subscription
     * starting from events in the event bus after the event with that replay ID.
     *
     * Generated from protobuf field <code>bytes replay_id = 2;</code>
     * @return string
     */
    public function getReplayId()
    {
        return $this->replay_id;
    }

    /**
     * The replay ID of the event.
     * A subscriber app can store the replay ID. When the app restarts, it can resume subscription
     * starting from events in the event bus after the event with that replay ID.
     *
     * Generated from protobuf field <code>bytes replay_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setReplayId($var)
    {
        GPBUtil::checkString($var, False);
        $this->replay_id = $var;

        return $this;
    }

}

